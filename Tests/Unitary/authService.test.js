/* 
================ üîê PRUEBAS DE AUTENTICACI√ìN ================

Este archivo contiene pruebas unitarias para la autenticaci√≥n de usuarios en la aplicaci√≥n.
Incluye validaciones para el inicio de sesi√≥n, cierre de sesi√≥n y manejo de errores.

üõ†Ô∏è **FUNCIONALIDADES PROBADAS**:
   - `authenticateUser` ‚Üí Valida las credenciales del usuario y genera tokens de sesi√≥n.
   - `logoutUser` ‚Üí Cierra la sesi√≥n eliminando la sesi√≥n activa en la base de datos.

üéØ **OBJETIVO**:
   - Verificar que los usuarios puedan iniciar sesi√≥n con credenciales v√°lidas.
   - Asegurar que las sesiones se manejen correctamente en la base de datos.
   - Probar el cierre de sesi√≥n y la eliminaci√≥n de tokens activos.
   - Validar el manejo de errores en autenticaci√≥n y cierre de sesi√≥n.

‚úÖ **ESCENARIOS CUBIERTOS**:
   - Autenticaci√≥n exitosa con credenciales correctas. üîì
   - Rechazo de autenticaci√≥n con contrase√±a incorrecta. üö´
   - Rechazo de autenticaci√≥n con usuario inexistente. ‚ùå
   - Cierre de sesi√≥n exitoso. üîÑ
   - Intento de cierre de sesi√≥n con token inv√°lido. ‚ö†Ô∏è
   - Error en la base de datos al autenticar usuario. üõë
   - Error en la base de datos al intentar cerrar sesi√≥n. ‚ö°
   - Error al eliminar la sesi√≥n en el cierre de sesi√≥n. ‚ùó
*/

const { authenticateUser, logoutUser } = require('../../src/Services/authServices');
const { generateToken } = require('../../src/Helpers/jwtHelper');
const bcrypt = require('bcrypt');

jest.mock('../../Db/db.config', () => ({
  User: {
    findOne: jest.fn(),
  },
  Session: {
    findOne: jest.fn(),
    create: jest.fn(),
    findAll: jest.fn(),
    destroy: jest.fn(),
  },
}));

const { User, Session } = require('../../Db/db.config');

describe('üîê Pruebas de Autenticaci√≥n', () => {
  let mockUser;
  let hashedPassword;

  beforeAll(async () => {
    hashedPassword = await bcrypt.hash('validPassword', 10);
    mockUser = {
      id: 1,
      email: 'test@email.com',
      password: hashedPassword,
    };
  });

  test('‚úÖ Autenticar usuario con credenciales correctas', async () => {
    User.findOne.mockResolvedValue(mockUser);
    Session.findAll.mockResolvedValue([]);
    Session.create.mockResolvedValue({});

    const result = await authenticateUser({
      email: 'test@email.com',
      password: 'validPassword',
      ip_address: '127.0.0.1',
      device_info: 'Test Device',
    });

    expect(result.status).toBe(200);
    expect(result.success).toBe(true);
    expect(result.body).toHaveProperty('token');
    expect(result.body).toHaveProperty('refreshToken');
  });

  test('‚ùå Rechazar autenticaci√≥n con contrase√±a incorrecta', async () => {
    User.findOne.mockResolvedValue(mockUser);

    const result = await authenticateUser({
      email: 'test@email.com',
      password: 'wrongPassword',
    });

    expect(result.status).toBe(401);
    expect(result.success).toBe(false);
  });

  test('‚ùå Rechazar autenticaci√≥n con usuario inexistente', async () => {
    User.findOne.mockResolvedValue(null);

    const result = await authenticateUser({
      email: 'unknown@email.com',
      password: 'validPassword',
    });

    expect(result.status).toBe(401);
    expect(result.success).toBe(false);
  });

  test('‚úÖ Cerrar sesi√≥n correctamente', async () => {
    const validToken = generateToken(mockUser);
    Session.findOne.mockResolvedValue({ destroy: jest.fn() });

    const result = await logoutUser(validToken);

    expect(result.status).toBe(200);
    expect(result.success).toBe(true);
  });

  test('‚ùå Intentar cerrar sesi√≥n con token inv√°lido', async () => {
    Session.findOne.mockResolvedValue(null);

    const result = await logoutUser('invalidToken');

    expect(result.status).toBe(404);
    expect(result.success).toBe(false);
  });

  test('‚ùå Error en la base de datos al autenticar usuario', async () => {
    User.findOne.mockRejectedValue(new Error('Database connection error'));
  
    await expect(authenticateUser({ email: 'test@email.com', password: 'validPassword' }))
      .rejects.toThrow(/La operaci√≥n no pudo completarse/); // Verificar el mensaje procesado
  });

  test('‚ùå Error en la base de datos al intentar cerrar sesi√≥n', async () => {
    Session.findOne.mockRejectedValue(new Error('DB error en sesi√≥n'));
  
    await expect(logoutUser('validToken'))
      .rejects.toThrow(/La operaci√≥n no pudo completarse/);
  });
  
  test('‚ùå Error al eliminar sesi√≥n en logout', async () => {
    Session.findOne.mockResolvedValue({
      destroy: jest.fn().mockRejectedValue(new Error('Error eliminando sesi√≥n')),
    });
  
    await expect(logoutUser('validToken'))
      .rejects.toThrow(/La operaci√≥n no pudo completarse/);
  });
});