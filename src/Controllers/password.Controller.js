/* 
================ CONTROLADOR DE RESTABLECIMIENTO DE CONTRASE√ëA =================

üìå **Descripci√≥n**
   - Gestiona el flujo de restablecimiento de contrase√±a de los usuarios.
   - Env√≠a un correo con un token para restablecer la contrase√±a.
   - Permite establecer una nueva contrase√±a con un token v√°lido.

üìö **M√©todos disponibles**:
   - `sendResetPasswordEmail(req, res, next)`: Env√≠a un correo con un token de restablecimiento.
   - `resetPassword(req, res, next)`: Permite cambiar la contrase√±a usando un token v√°lido.
*/

// -----------üì¶ IMPORTACIONES-----------
const { sendPasswordResetEmail, resetPassword } = require("../Services/passwordService");
const { authenticateUser } = require('../Services/authServices'); // Importa el servicio de autenticaci√≥n
const { serverResponse, formatError } = require("../Utils/responseUtils"); // Funciones de estandarizaci√≥n
const { GENERAL, USER, AUTH } = require("../Utils/messages"); // Importa los mensajes preestablecidos
const bcrypt = require('bcrypt');

/**
 * üìå Controlador de restablecimiento de contrase√±a
 */
const passwordController = {
    /**
     * üìå Env√≠a un correo con un token para restablecer la contrase√±a.
     * ‚úÖ Verifica si el correo existe antes de generar el token.
     * @param {Object} req - Petici√≥n HTTP (Debe contener `email` en el body).
     * @param {Object} res - Respuesta HTTP.
     * @param {Function} next - Funci√≥n para manejar errores.
     */
    sendResetPasswordEmail: async (req, res, next) => {
        try {
            const { email } = req.body;
            const response = await sendPasswordResetEmail(email);
            return serverResponse(res, response);
        } catch (error) {
            next(formatError(error, "sendResetPasswordEmail-passwordController", 500, GENERAL.FAILURE));
        }
    },

    /**
     * üìå Restablece la contrase√±a con un token v√°lido.
     * ‚úÖ Verifica si el token es v√°lido antes de actualizar la contrase√±a.
     * @param {Object} req - Petici√≥n HTTP (Debe contener `token` y `newPassword` en el body).
     * @param {Object} res - Respuesta HTTP.
     * @param {Function} next - Funci√≥n para manejar errores.
     */
    resetPassword: async (req, res, next) => {
        try {
            const { new_password } = req.body;

            if (!req.user) {
                return serverResponse(res, { status: 400, success: false, message: USER.INVALID_RESET_TOKEN });
            }

            const response = await resetPassword(req.user, new_password);
            return serverResponse(res, response);
        } catch (error) {
            next(formatError(error, "resetPassword-passwordController", 500, GENERAL.FAILURE));
        }
    },

    /**
     * üìå Cambia la contrase√±a con un token v√°lido.
     * ‚úÖ Verifica si el token es v√°lido antes de actualizar la contrase√±a.
     * @param {Object} req - Petici√≥n HTTP (Debe contener `token` y `newPassword` en el body).
     * @param {Object} res - Respuesta HTTP.
     * @param {Function} next - Funci√≥n para manejar errores.
     */
    changePassword: async (req, res, next) => {
        try {
            const { new_password, current_password } = req.body;
            
            if (!req.user) {
                return serverResponse(res, { status: 400, success: false, message: AUTH.INVALID_CREDENTIALS });
            }

            // Comparar la contrase√±a ingresada con la almacenada
            const isPasswordValid = await bcrypt.compare(current_password, req.user.password);    
            
            if (!isPasswordValid ) {
                return serverResponse(res, { status: 400, success: false, message: AUTH.INVALID_CREDENTIALS });
            }

            const response = await resetPassword(req.user, new_password);
            return serverResponse(res, response);
        } catch (error) {
            next(formatError(error, "changePassword-passwordController", 500, GENERAL.FAILURE));
        }
    },
};

module.exports = passwordController;